// Code generated by protoc-gen-go. DO NOT EDIT.
// source: info.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type InfoRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int64    `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Height               int64    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoRequest) Reset()         { *m = InfoRequest{} }
func (m *InfoRequest) String() string { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()    {}
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{0}
}

func (m *InfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoRequest.Unmarshal(m, b)
}
func (m *InfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoRequest.Marshal(b, m, deterministic)
}
func (m *InfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoRequest.Merge(m, src)
}
func (m *InfoRequest) XXX_Size() int {
	return xxx_messageInfo_InfoRequest.Size(m)
}
func (m *InfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InfoRequest proto.InternalMessageInfo

func (m *InfoRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InfoRequest) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *InfoRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// The response message containing the greetings
type InfoReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReply) Reset()         { *m = InfoReply{} }
func (m *InfoReply) String() string { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()    {}
func (*InfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f140d5b28dddb141, []int{1}
}

func (m *InfoReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoReply.Unmarshal(m, b)
}
func (m *InfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoReply.Marshal(b, m, deterministic)
}
func (m *InfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReply.Merge(m, src)
}
func (m *InfoReply) XXX_Size() int {
	return xxx_messageInfo_InfoReply.Size(m)
}
func (m *InfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReply proto.InternalMessageInfo

func (m *InfoReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *InfoReply) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*InfoRequest)(nil), "main.InfoRequest")
	proto.RegisterType((*InfoReply)(nil), "main.InfoReply")
}

func init() { proto.RegisterFile("info.proto", fileDescriptor_f140d5b28dddb141) }

var fileDescriptor_f140d5b28dddb141 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xcd, 0x8a, 0x83, 0x30,
	0x14, 0x85, 0xc7, 0x51, 0x74, 0xbc, 0xb3, 0x98, 0x99, 0xbb, 0x18, 0x42, 0x57, 0xe2, 0xca, 0x95,
	0x85, 0x76, 0xed, 0x03, 0x94, 0xee, 0xe2, 0x13, 0xa4, 0x72, 0xfd, 0x01, 0x4d, 0x6c, 0x12, 0x0b,
	0xbe, 0x7d, 0x49, 0x6a, 0xc1, 0xdd, 0x3d, 0x1f, 0x9c, 0x8f, 0x73, 0x01, 0x06, 0xd9, 0xaa, 0x72,
	0xd6, 0xca, 0x2a, 0x8c, 0x26, 0x31, 0xc8, 0xfc, 0x0a, 0xdf, 0x17, 0xd9, 0x2a, 0x4e, 0xf7, 0x85,
	0x8c, 0x45, 0x84, 0x48, 0x8a, 0x89, 0x58, 0x90, 0x05, 0x45, 0xca, 0xfd, 0x8d, 0xbf, 0x10, 0x8a,
	0x8e, 0xd8, 0x67, 0x16, 0x14, 0x21, 0x77, 0x27, 0xfe, 0x43, 0xdc, 0xd3, 0xd0, 0xf5, 0x96, 0x85,
	0x1e, 0x6e, 0x29, 0xaf, 0x20, 0x7d, 0xc9, 0xe6, 0x71, 0x45, 0x06, 0x89, 0x59, 0x9a, 0x86, 0x8c,
	0xf1, 0xb6, 0x2f, 0xfe, 0x8e, 0xae, 0xae, 0x49, 0x18, 0x25, 0xbd, 0x33, 0xe5, 0x5b, 0x3a, 0x55,
	0x00, 0xae, 0x5e, 0x93, 0x7e, 0x90, 0xc6, 0x23, 0x24, 0x35, 0x59, 0x07, 0xf0, 0xaf, 0x74, 0x5b,
	0xcb, 0xdd, 0xd0, 0xc3, 0xcf, 0x1e, 0xcd, 0xe3, 0x9a, 0x7f, 0xdc, 0x62, 0xff, 0xd7, 0xf9, 0x19,
	0x00, 0x00, 0xff, 0xff, 0x05, 0xe0, 0xea, 0x0b, 0xe5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InfoServerClient is the client API for InfoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoServerClient interface {
	// Sends a greeting
	SetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error)
}

type infoServerClient struct {
	cc *grpc.ClientConn
}

func NewInfoServerClient(cc *grpc.ClientConn) InfoServerClient {
	return &infoServerClient{cc}
}

func (c *infoServerClient) SetInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := c.cc.Invoke(ctx, "/main.InfoServer/SetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServerServer is the server API for InfoServer service.
type InfoServerServer interface {
	// Sends a greeting
	SetInfo(context.Context, *InfoRequest) (*InfoReply, error)
}

func RegisterInfoServerServer(s *grpc.Server, srv InfoServerServer) {
	s.RegisterService(&_InfoServer_serviceDesc, srv)
}

func _InfoServer_SetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServer).SetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.InfoServer/SetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServer).SetInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.InfoServer",
	HandlerType: (*InfoServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetInfo",
			Handler:    _InfoServer_SetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info.proto",
}
